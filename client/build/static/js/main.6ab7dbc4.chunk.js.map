{"version":3,"sources":["context/AuthContext.js","hooks/http.hook.js","pages/ArticlesPage.js","pages/HomePage.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["noop","console","log","AuthContext","createContext","token","userId","login","logout","isAuthenticated","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","ArticlesPage","history","useHistory","auth","useContext","articles","setArticles","refreshArticles","fetchArticles","Authorization","useEffect","onClick","push","style","float","length","map","article","index","key","title","text","HomePage","password","form","setForm","changeHandler","event","target","name","value","loginHandler","className","placeholder","id","type","onChange","disabled","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","to","useRoutes","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6ab7dbc4.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nfunction noop() {\r\n  console.log('____noop____')\r\n}\r\n\r\nexport const AuthContext = createContext({\r\n  token: null,\r\n  userId: null,\r\n  login: noop,\r\n  logout: noop,\r\n  isAuthenticated: false\r\n})","import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n    setLoading(true)\r\n    try {\r\n      if (body) {\r\n        body = JSON.stringify(body)\r\n        headers['Content-Type'] = 'application/json'\r\n      }\r\n\r\n      const response = await fetch(url, {method, body, headers})\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Error :: Backend connection')\r\n      }\r\n\r\n      setLoading(false)\r\n\r\n      return data\r\n    } catch (e) {\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setError(null), [])\r\n\r\n  return { loading, request, error, clearError }\r\n}","import React, { useState, useContext, useEffect, useCallback } from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHttp} from '../hooks/http.hook'\r\n\r\nconst ArticlesPage = () => {\r\n  const history = useHistory()\r\n  const auth = useContext(AuthContext)\r\n  const {token, userId} = useContext(AuthContext)\r\n  const [articles, setArticles] = useState([])\r\n  const {loading, request, error} = useHttp()\r\n\r\n  const refreshArticles = async () => {\r\n    setArticles([])\r\n    fetchArticles()\r\n  }\r\n\r\n  const fetchArticles = useCallback( async () => {\r\n    console.log('send')\r\n    try {\r\n      const data = await request('/api/articles?userId='+userId, 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      console.log('data', data)\r\n      setArticles(data.articles)\r\n    } catch (e) {}\r\n  }, [token, request])\r\n\r\n  const logoutHandler = () => {\r\n    auth.logout()\r\n    history.push('/')\r\n  }\r\n  \r\n  useEffect(() => {\r\n    fetchArticles()\r\n  }, [fetchArticles])\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={logoutHandler} style={{float:'right'}}>Logout</button>\r\n      <h2>ArticlesPage</h2>\r\n      \r\n      <button onClick={refreshArticles}>Refresh</button>\r\n      <br/>    \r\n      {articles.length==0 && \"Loading...\"}\r\n      {articles.length>0 && \r\n        articles.map((article, index) => \r\n          <p key={index}><b>{article.title}</b><br/> {article.text}</p>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ArticlesPage","import React, {useState, useContext,} from 'react'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHttp} from '../hooks/http.hook'\r\n\r\nconst HomePage = () => {\r\n  const auth = useContext(AuthContext)\r\n  const {loading, request, error} = useHttp()\r\n  const [form, setForm] = useState({\r\n    login: '', password: ''\r\n  })\r\n\r\n  const changeHandler = event => {\r\n    setForm({ ...form, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const loginHandler = async () => {\r\n    try {\r\n      const data = await request('/api/signin', 'POST', {...form})\r\n      auth.login(data.token, data.userId)\r\n    } catch (e) {}\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>HomePage</h2>\r\n\r\n      <div className=\"form-content\">\r\n        <div>\r\n          <label>Login: </label>\r\n          <input\r\n            placeholder=\"Login\"\r\n            id=\"login\"\r\n            type=\"text\"\r\n            name=\"login\"\r\n            value={form.login}\r\n            onChange={changeHandler}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Password:</label>\r\n          <input\r\n            placeholder=\"Password\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={form.password}\r\n            onChange={changeHandler}\r\n          />\r\n        </div>\r\n        <button\r\n          disabled={form.login.length==0 || form.password.length==0}\r\n          onClick={loginHandler}\r\n        >\r\n          sign in\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomePage","import React from 'react'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport {useRoutes} from './routes'\nimport {AuthContext} from './context/AuthContext'\nimport {useAuth} from './hooks/auth.hook'\n\nfunction App() {\n  const {token, login, logout, userId, ready} = useAuth()\n  const isAuthenticated = !!token\n  const routes = useRoutes(isAuthenticated)\n\n  return (\n    <AuthContext.Provider value={{\n      token, login, logout, userId, isAuthenticated\n    }}>\n      <Router>\n        <div className=\"container\">\n          {routes}\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App\n","import {useState, useCallback, useEffect} from 'react'\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () => {\r\n  const [token, setToken] = useState(null)\r\n  const [ready, setReady] = useState(false)\r\n  const [userId, setUserId] = useState(null)\r\n\r\n  const login = useCallback((jwtToken, id) => {\r\n    setToken(jwtToken)\r\n    setUserId(id)\r\n\r\n    localStorage.setItem(storageName, JSON.stringify({\r\n      userId: id, token: jwtToken\r\n    }))\r\n  }, [])\r\n\r\n\r\n  const logout = useCallback(() => {\r\n    setToken(null)\r\n    setUserId(null)\r\n    localStorage.removeItem(storageName)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem(storageName))\r\n\r\n    if (data && data.token) {\r\n      login(data.token, data.userId)\r\n    }\r\n    setReady(true)\r\n  }, [login])\r\n\r\n\r\n  return { login, logout, token, userId, ready }\r\n}","import React from 'react'\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport { ArticlesPage, HomePage } from './pages'\r\n\r\nexport const useRoutes = isAuthenticated => {\r\n  if (isAuthenticated) {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/articles\" exact>\r\n          <ArticlesPage />\r\n        </Route>\r\n        <Redirect to=\"/articles\" />\r\n      </Switch>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact>\r\n        <HomePage />\r\n      </Route>\r\n      <Redirect to=\"/\" />\r\n    </Switch>\r\n  )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}